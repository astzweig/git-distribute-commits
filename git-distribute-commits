#!/usr/bin/env zsh

# =============
# Utilities
# =============

function dateToTimestamp() {
	local d1="$1"
	date -j -f "%Y-%m-%dT%H:%M:%S" "$1" +%s 2> /dev/null
}

function getDateDiffInDays() {
	local d1="$1" d2="$2" result
	[[ $# -eq 2 ]] || return 1

	isNumberRegex='^([0-9]|[1-9][0-9]*)$'
	[[ $d1 =~ $isNumberRegex ]] && (( $d1 >= 0 )) || return 2
	[[ $d2 =~ $isNumberRegex ]] && (( $d2 >= 0 )) || return 3

	if [[ $((d1 - d2)) -gt 0 ]]; then
		(( result = d1 - d2 ))
	else
		(( result = d2 - d1 ))
	fi
	echo $(( $result / 86400 ))
}

function getAmountOfLinesInVar() {
	local varname=$1
	local lines=(${(f)${(P)varname}})
	echo ${#lines}
}

function sortLinesInVarLexicographically() {
	local varname=$1
	typeset -g ${varname}=${(F)${(if)${(P)varname}}}
}

function selectFirstNLinesOfVar() {
	local varname=$1 n=$2
	[[ -n $varname ]] || return 1
	[[ -v $varname ]] || return 2
	[[ -n $n ]] || return 0
	local lines=(${(f)${(P)varname}})
	[[ ${#lines} -gt $n ]] || return 0
	typeset -g ${varname}=${(F)lines[1,$n]}
}

function getLastLineOfVar() {
	local varname=$1
	[[ $# -eq 1 ]] || return 1
	[[ -v $varname ]] || return 2
	local lines=(${(f)${(P)varname}})
	echo ${lines[-1]}
}

function ensureVarHasAtLeastNLines() {
	local varname=$1 n=$2
	local lines=(${(f)${(P)varname}})
	[[ $n -gt 0 ]] || return 0
	if [[ ${#lines} -lt $n ]]; then
		typeset -g ${varname}="`printf "${(P)varname}\n%.0s" {1..$n}`"
	fi
}

# =============
# End Utilities
# =============

function sortIdealCommitDates() {
	sortLinesInVarLexicographically idealCommitDates
}

function repeatCommitDatesIfNecessary() {
	local linesNecessary=`getAmountOfLinesInVar unpublishedCommits`
	local linesAvailable=`getAmountOfLinesInVar idealCommitDates`
	ensureVarHasAtLeastNLines idealCommitDates $linesNecessary
	selectFirstNLinesOfVar idealCommitDates $linesNecessary
}

function getDateDiffToNowInDays() {
	local d1= now=`date -j +%s`
	d1=`dateToTimestamp $1`
	[[ $? -eq 0 ]] || { print "Could not convert date $1 to timestamp. Aborting." >&2; exit 30 }
	getDateDiffInDays $d1 $now
}

function getGitHubContributions() {
	local fromDate="$1"
	local aYearAgo="`date -j -v-365d -Iseconds | cut -d+ -f1`"
	[[ -z $fromDate || `getDateDiffToNowInDays "${fromDate}"` -gt 364 ]] && fromDate=$aYearAgo
	gh api graphql -f \
	query="
	{
		viewer {
			contributionsCollection(from: \"${fromDate}Z\" , to: \"`date -j -I`T23:59:59Z\") {
				contributionCalendar {
					weeks {
						contributionDays {
							date
							contributionCount
						}
						firstDay
					}
				}
			}
		}
	}" \
	--jq '[.data.viewer.contributionsCollection.contributionCalendar.weeks.[].contributionDays.[]] | sort_by(.contributionCount) | .[] | "\(.date)"'
}

function getDateOfLastPublishedParent() {
	local parentOfLastCommit=`git log --format="%P" -n 1 $(getLastLineOfVar unpublishedCommits)`
	[[ -n $parentOfLastCommit ]] || return
	git log --format='%aI' -n 1 $parentOfLastCommit | cut -d+ -f1
}

function getBranchExclusiveRevListArgs() {
	local currentBranch branches remoteBranches
	currentBranch=`git branch --show-current`
	branches=`git branch | sed 's/^.\{2\}//' | cut -d' ' -f1 | grep -v "^$currentBranch" | sed -e 's/^/\^/'`
	remoteBranches=`git branch -r | sed 's/^.\{2\}//' | cut -d' ' -f1 | grep -v "^$currentBranch" | sed -e 's/^/\^/'`
	revListArgs+=($currentBranch ${(f)branches} ${(f)remoteBranches})
}

function getUnpublishedCommits() {
	unpublishedCommits=`git rev-list ${revListArgs} 2> /dev/null`
	[[ $? -eq 0 ]] || { print "No upstream configured for branch. Aborting." >&2; exit 20 }
	[[ -n $unpublishedCommits ]] || { print "No unpublished commits."; exit 0 }
}

function isGitDirectory() {
	git status &> /dev/null
}

function checkGHTool() {
	whence gh &> /dev/null || return 1
	gh auth status --hostname github.com &> /dev/null || return 2
}

function mergeIdealCommitDatesWithRealCommitDates() {
	local index unpublishedCommit idealCommitDate realCommitDate
	local unpublishedCommitsList=(${(f)unpublishedCommits}) idealCommitDatesList=(${(f)idealCommitDates})

	[[ ${#unpublishedCommitsList} == ${#idealCommitDatesList} ]] || {
		print "Amount of Unpublished commits (${#unpublishedCommitsList}) does not equal amount of ideal commit dates (${#idealCommitDatesList}). Aborting." >&2
		exit 40
	}

	index=1
	while [[ $index -le ${#unpublishedCommitsList} ]]; do
		unpublishedCommit=${unpublishedCommitsList[$index]}
		idealCommitDate=${idealCommitDatesList[$index]}
		idealCommitDatesList+=([$index]="`git log --format=%aI -n 1 $unpublishedCommit | cut -d+ -f1 | sed "s/.*T/${idealCommitDate}T/"`")
		(( index += 1 ))
	done

	idealCommitDates=${(F)idealCommitDatesList}
}

function changeGitCommitDate() {
	local newdatesfile=$1 NEW_DATE NEW_FILE_CONTENT
	NEW_DATE="`head -1 "$newdatesfile"`"
	NEW_FILE_CONTENT="`tail -n +2 "$newdatesfile"`"
	echo "$NEW_FILE_CONTENT" > "$newdatesfile"

	export GIT_AUTHOR_DATE="$NEW_DATE"
	export GIT_COMMITTER_DATE="$NEW_DATE"
}

function main() {
	local unpublishedCommits idealCommitDates revListArgs=()
	isGitDirectory || { print "Not a git directory. Aborting."; exit 1 }
	checkGHTool || { print "Please check that gh tools is installed correctly and you are logged in. Aborting."; exit 2 }
	getBranchExclusiveRevListArgs
	getUnpublishedCommits

	idealCommitDates=$(getGitHubContributions "`getDateOfLastPublishedParent`")
	[[ $? -eq 0 && -n $idealCommitDates ]] || { print "Could not get ideal commit dates from GitHub. Aborting." >&2; exit 3 }

	repeatCommitDatesIfNecessary
	mergeIdealCommitDatesWithRealCommitDates
	sortIdealCommitDates
	newdatesfile=`mktemp`
	trap 'rm $newdatesfile' INT TERM EXIT
	echo ${idealCommitDates} > $newdatesfile

	FILTER_BRANCH_SQUELCH_WARNING=1 git filter-branch --force \
		--setup "`whence -f changeGitCommitDate`" \
		--env-filter "changeGitCommitDate \"$newdatesfile\""\
		-- \
		${revListArgs}
}

if [[ "${ZSH_EVAL_CONTEXT}" == toplevel ]]; then
	newdatesfile= main "$@"
fi
